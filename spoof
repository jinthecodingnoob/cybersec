#!/usr/bin/env python3

from scapy.all import *
from threading import Thread

# Number of times to repeat sending the spoofed packet
repeat_count = 5  # Adjust this value as needed

def send_spoofed_packets():
    print("----------- Starting spoofed packet sending process -----------")
    
    for i in range(repeat_count):
        print(f"----------- Sending spoofed packet {i+1}/{repeat_count} -----------")

        # Create the IP layer with the source as 7.0.7.3 and destination as 10.9.0.5
        ip_layer = IP(src='7.0.7.3', dst='10.9.0.5')

        # Create the ICMP layer as an echo-reply (type=0)
        icmp_layer = ICMP(type=0, id=1000, seq=i+1)

        # Add a payload (common in ping requests)
        payload = b"12345678901234567890"

        # Construct the spoofed packet
        pkt = ip_layer/icmp_layer/payload

        # Display the packet details
        pkt.show()

        # Send the spoofed packet without specifying an interface
        send(pkt)

        print(f"----------- Spoofed packet {i+1}/{repeat_count} sent -----------")
    
    print("----------- All packets sent -----------")

def display_echo_reply(packet):
    if packet.haslayer(ICMP) and packet[ICMP].type == 0:  # ICMP type 0 is echo-reply
        print(f"Received ICMP Echo Reply from {packet[IP].src} to {packet[IP].dst}")
        packet.show()

def sniff_echo_replies():
    print("----------- Starting sniffing process -----------")
    # Sniff and display ICMP echo replies
    sniff(filter="icmp and host 10.9.0.5", prn=display_echo_reply)

# Start the sniffing thread
sniffer_thread = Thread(target=sniff_echo_replies)
sniffer_thread.start()

# Send the spoofed packets
send_spoofed_packets()

# Wait for the sniffer thread to complete
sniffer_thread.join()

print("----------- Process completed -----------")
